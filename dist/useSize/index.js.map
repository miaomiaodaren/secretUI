{"version":3,"sources":["useSize/index.tsx"],"names":["useSize","target","el","width","clientWidth","height","clientHeight","state","setState","resizeObserver","ResizeObserver","entries","forEach","entry","observe","disconnect"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAcA,MAAMA,OAAO,GAAG,SAAVA,OAAU,OAA2D;AAAA,QAAxDC,MAAwD,QAAxDA,MAAwD;;AACzE,oBAA0B,qBAAS,YAAM;AACvC,UAAMC,EAAE,GAAGD,MAAX;AACA,aAAO;AACLE,QAAAA,KAAK,EAAE,CAAED,EAAE,IAAI,EAAR,EAA4BE,WAD9B;AAELC,QAAAA,MAAM,EAAE,CAAEH,EAAE,IAAI,EAAR,EAA4BI;AAF/B,OAAP;AAID,KANyB,CAA1B;AAAA;AAAA,QAAOC,KAAP;AAAA,QAAcC,QAAd;;AAOA,gCAAgB,YAAM;AACpB,UAAI,CAACP,MAAL,EAAa;AACX,eAAO,YAAM,CAAE,CAAf;AACD;;AACD,UAAMQ,cAAc,GAAG,IAAIC,kCAAJ,CAAmB,UAACC,OAAD,EAAa;AACrDA,QAAAA,OAAO,CAACC,OAAR,CAAgB,UAACC,KAAD,EAAW;AAAA;;AACzBL,UAAAA,QAAQ,CAAC;AACPL,YAAAA,KAAK,mBAAGU,KAAK,CAACZ,MAAT,kDAAE,cAA2BG,WAD3B;AAEPC,YAAAA,MAAM,oBAAGQ,KAAK,CAACZ,MAAT,mDAAE,eAA2BK;AAF5B,WAAD,CAAR;AAID,SALD;AAMD,OAPsB,CAAvB;AAQAG,MAAAA,cAAc,CAACK,OAAf,CAAuBb,MAAvB;AACA,aAAO,YAAM;AACXQ,QAAAA,cAAc,CAACM,UAAf;AACD,OAFD;AAGD,KAhBD,EAgBG,CAACd,MAAD,CAhBH;AAiBA,WAAOM,KAAP;AACD,GA1BD;;iBA4BeP,O","sourcesContent":["import type { MutableRefObject } from 'react';\nimport { useLayoutEffect, useState } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\n\ntype baseTarget<T = HTMLElement> =\n  | (() => T | null)\n  | T\n  | null\n  | MutableRefObject<T | null | undefined>;\n\ninterface Tprops {\n  target: baseTarget;\n}\n\nconst useSize = ({ target }: Tprops): { width: number; height: number } => {\n  const [state, setState] = useState(() => {\n    const el = target;\n    return {\n      width: ((el || {}) as HTMLElement).clientWidth,\n      height: ((el || {}) as HTMLElement).clientHeight,\n    };\n  });\n  useLayoutEffect(() => {\n    if (!target) {\n      return () => {};\n    }\n    const resizeObserver = new ResizeObserver((entries) => {\n      entries.forEach((entry) => {\n        setState({\n          width: (entry.target as Element)?.clientWidth,\n          height: (entry.target as Element)?.clientHeight,\n        });\n      });\n    });\n    resizeObserver.observe(target as HTMLElement);\n    return () => {\n      resizeObserver.disconnect();\n    };\n  }, [target]);\n  return state;\n};\n\nexport default useSize;\n"],"file":"index.js"}